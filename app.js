// Generated by CoffeeScript 1.8.0
(function() {
  var Evernote, MIME_TO_EXTESION_MAPPING, async, createNote, createRes, crypto, filterImgs, fs, getImgs, mime, noteStore;

  noteStore = require('./evernote');

  Evernote = require('evernote').Evernote;

  fs = require('fs');

  crypto = require('crypto');

  mime = require('mime');

  async = require('async');

  MIME_TO_EXTESION_MAPPING = {
    'image/png': '.png',
    'image/jpg': '.jpg',
    'image/jpeg': '.jpg',
    'image/gif': '.gif'
  };

  getImgs = function(cb) {
    return fs.readdir(process.cwd(), function(err, files) {
      var f, imgFiles, type, _i, _len;
      if (err) {
        return cb(err);
      }
      imgFiles = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        type = mime.lookup(f);
        if (type in MIME_TO_EXTESION_MAPPING && fs.statSync(f).size < 1024 * 1024 * 10) {
          imgFiles.push(f);
        }
      }
      return cb(null, imgFiles);
    });
  };

  filterImgs = function(imgFiles, cb) {
    var count, filter, index, k, start, v, _i, _len;
    filter = {};
    count = 0;
    index = 1;
    start = 0;
    for (k = _i = 0, _len = imgFiles.length; _i < _len; k = ++_i) {
      v = imgFiles[k];
      if (fs.statSync(v).size < 1024 * 1024 * 10) {
        console.log(v);
        count += fs.statSync(v).size;
        if (count >= 1024 * 1024 * 10) {
          console.log(k);
          filter[index] = imgFiles.slice(start, k);
          index += 1;
          count = 0;
          start = k;
        }
      }
    }
    return console.log(filter);
  };

  async.auto({
    getImg: function(cb) {
      return getImgs(function(err, res) {
        if (err) {
          return console.log(err);
        }
        return cb(null, res);
      });
    },
    filter: [
      'getImg', function(cb, result) {
        var imgs;
        imgs = result.getImg;
        return filterImgs(imgs, function(cb) {});
      }
    ]
  });

  createRes = function(imgFiles, cb) {
    var resources;
    resources = [];
    return async.eachSeries(imgFiles, function(item, callback) {
      var data, hash, image, resource;
      image = fs.readFileSync(item);
      hash = image.toString('base64');
      data = new Evernote.Data();
      data.size = image.length;
      data.bodyHash = hash;
      data.body = image;
      resource = new Evernote.Resource();
      resource.mime = mime.lookup(item);
      resource.data = data;
      resource.push(resource);
      return callback();
    }, function(eachErr) {
      if (eachErr) {
        return cb(eachErr);
      }
    });
  };

  createNote = function(cb) {
    var note;
    note = new Evernote.Note();
    return note.title = "Test Note";
  };

}).call(this);

//# sourceMappingURL=app.js.map
