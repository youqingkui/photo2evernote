// Generated by CoffeeScript 1.8.0
(function() {
  var Evernote, MIME_TO_EXTESION_MAPPING, argv, async, crypto, email, exec, f, filterImg, fs, fse, gimgFiles, isNumber, l, mime, mvFile, noteStore, pwd, shell, sliceImg, t, _ref;

  noteStore = require('./evernote');

  Evernote = require('evernote').Evernote;

  fs = require('fs');

  crypto = require('crypto');

  mime = require('mime');

  async = require('async');

  fse = require('fs-extra');

  email = require('./email');

  argv = require('optimist').argv;

  exec = require('child_process').exec;

  MIME_TO_EXTESION_MAPPING = {
    'image/png': '.png',
    'image/jpg': '.jpg',
    'image/jpeg': '.jpg',
    'image/gif': '.gif'
  };

  pwd = process.cwd().split('/');

  gimgFiles = [];


  /* 筛选图片 */

  filterImg = function(dir, limit, forDir) {
    var f, file, files, tmp, type, _i, _len, _results;
    if (dir == null) {
      dir = process.cwd();
    }
    if (limit == null) {
      limit = 100;
    }
    if (forDir == null) {
      forDir = false;
    }
    files = fs.readdirSync(dir);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      f = files[_i];
      file = dir + '/' + f;
      type = mime.lookup(file);
      if (type in MIME_TO_EXTESION_MAPPING && fs.statSync(file).size < 1024 * 1024 * limit) {
        _results.push(gimgFiles.push(file));
      } else if (fs.statSync(file).isDirectory() && forDir) {
        tmp = dir + '/' + f;
        console.log(tmp);
        _results.push(filterImg(tmp, limit, forDir));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };


  /* 按限制大小分组图片 */

  sliceImg = function(imgFiles, limit, cb) {
    var count, filter, index, k, v, _i, _len;
    if (limit == null) {
      limit = 100;
    }
    filter = {};
    index = 1;
    count = 0;
    for (v = _i = 0, _len = imgFiles.length; _i < _len; v = ++_i) {
      k = imgFiles[v];
      if (!filter[index]) {
        filter[index] = [];
      }
      count += fs.statSync(k).size;
      if (count < 1024 * 1024 * limit) {
        filter[index].push(k);
      } else {
        index += 1;
        if (fs.statSync(k).size < 1024 * 1024 * limit) {
          filter[index] = [];
          filter[index].push(k);
          count = fs.statSync(k).size;
        }
      }
    }
    return cb(filter);
  };


  /* 移动图片 */

  mvFile = function(file, target) {
    var cmdStr;
    cmdStr = "cp -a " + file + " " + target;
    return exec(cmdStr, function(err, stdout, stderr) {
      if (err) {
        return console.log(err);
      }
      return console.log(stdout, stderr);
    });
  };

  shell = function(limit, f, noteTitle) {
    if (limit == null) {
      limit = 200;
    }
    console.log("limit", limit);
    return async.auto({
      getImg: function(cb) {
        filterImg(process.cwd(), limit, f);
        return cb(null, gimgFiles);
      },
      filter: [
        'getImg', function(cb, result) {
          var imgs;
          imgs = result.getImg;
          return sliceImg(imgs, limit, function(filter) {
            console.log(filter);
            return cb(null, filter);
          });
        }
      ],
      copFile: [
        'filter', function(cb, result) {
          var filter, i, k, v, _i, _len;
          filter = result.filter;
          console.log(filter);
          for (k in filter) {
            v = filter[k];
            for (_i = 0, _len = v.length; _i < _len; _i++) {
              i = v[_i];
              if (!fs.existsSync(k)) {
                fs.mkdirSync(k);
              }
              mvFile(i, k);
            }
          }
          return console.log("copy imgs ok");
        }
      ]
    });
  };

  isNumber = function(num) {
    var res;
    res = Number(num);
    if (isNaN(res)) {
      return false;
    }
    return true;
  };

  console.log(argv);

  f = argv.f;

  l = 200;

  t = argv.t;

  if (argv.l) {
    if (isNumber(argv.l) && (0 < (_ref = argv.l) && _ref <= 200)) {
      l = argv.l;
      shell(l, f, t);
    } else {
      console.log("l 为笔记大小限制，默认为高级账户最大值:200M。请输入正确的l参数，如：-l 200");
    }
  } else {
    shell(l, f, t);
  }

}).call(this);

//# sourceMappingURL=app.js.map
